diff --git a/Makefile b/Makefile
index 23bcb05..2187414 100644
--- a/Makefile
+++ b/Makefile
@@ -4,9 +4,9 @@
 # Mike Oliphant (oliphant@gtk.org)
 #
 
-CC?= gcc
+CC= g++
 
-CFLAGS+= -Wall -DHAVE_MEMCPY
+CFLAGS+= -Wall -Wextra -DHAVE_MEMCPY
 
 # all known MS Windows OS define the ComSpec environment variable
 ifdef ComSpec
@@ -26,7 +26,7 @@ endif
 
 # BeOS doesn't have libm (it's all in libroot)
 ifneq ($(OSTYPE),beos)
-LIBS= -lm
+LIBS= -lm -ltag
 else
 # BeOS: without this it wants to use bcopy() :^)
 CFLAGS+= -DHAVE_MEMCPY
@@ -37,7 +37,7 @@ ifeq ($(OSTYPE),win)
 WINDRES = windres
 endif
 
-OBJS=	mp3gain.o apetag.o id3tag.o gain_analysis.o rg_error.o \
+OBJS=	mp3gain.o apetag.o id3tag.o id3tag_foobar.o gain_analysis.o rg_error.o \
 	mpglibDBL/common.o mpglibDBL/dct64_i386.o \
 	mpglibDBL/decode_i386.o mpglibDBL/interface.o \
 	mpglibDBL/layer3.o mpglibDBL/tabinit.o
diff --git a/apetag.c b/apetag.c
index 1003059..aabf23d 100644
--- a/apetag.c
+++ b/apetag.c
@@ -143,7 +143,6 @@ int ReadMP3APETag ( FILE *fp,  struct MP3GainTagInfo *info, struct APETagStruct
 {
     unsigned long               vsize;
     unsigned long               isize;
-    unsigned long               flags;
 	unsigned long				remaining;
     char*                       buff;
     char*                       p;
@@ -154,7 +153,6 @@ int ReadMP3APETag ( FILE *fp,  struct MP3GainTagInfo *info, struct APETagStruct
     unsigned long               TagLen;
     unsigned long               TagCount;
     unsigned long               origTagCount, otherFieldsCount;
-    unsigned long               curFieldNum;
     unsigned long               Ver;
     char*                       name;
     int                         is_info;
@@ -191,11 +189,10 @@ int ReadMP3APETag ( FILE *fp,  struct MP3GainTagInfo *info, struct APETagStruct
 
 
     end = buff + TagLen - sizeof (T);
-	curFieldNum = 0;
     for ( p = buff; p < end && TagCount--; ) {
 		if (end - p < 8) break;
         vsize = Read_LE_Uint32 (p); p += 4;
-        flags = Read_LE_Uint32 (p); p += 4;
+                Read_LE_Uint32 (p); p += 4;
 
 		remaining = (unsigned long) (end - p);
         isize = strlen_max (p, remaining);
diff --git a/gain_analysis.c b/gain_analysis.c
index e6e4e40..b29bed7 100644
--- a/gain_analysis.c
+++ b/gain_analysis.c
@@ -105,13 +105,13 @@ typedef signed int      Int32_t;
 #define YULE_FILTER     filterYule
 #define BUTTER_FILTER   filterButter
 #define RMS_PERCENTILE      0.95        // percentile which is louder than the proposed level
-#define MAX_SAMP_FREQ   96000.          // maximum allowed sample frequency [Hz]
-#define RMS_WINDOW_TIME     0.050       // Time slice size [s]
-#define STEPS_per_dB      100.          // Table entries per dB
-#define MAX_dB            120.          // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
+#define MAX_SAMP_FREQ   96000           // maximum allowed sample frequency [Hz]
+#define RMS_WINDOW_TIME    50/1000      // Time slice size [s]
+#define STEPS_per_dB      100           // Table entries per dB
+#define MAX_dB            120           // Table entries for 0...MAX_dB (normal max. values are 70...80 dB)
 
 #define MAX_ORDER               (BUTTER_ORDER > YULE_ORDER ? BUTTER_ORDER : YULE_ORDER)
-#define MAX_SAMPLES_PER_WINDOW  (size_t) (MAX_SAMP_FREQ * RMS_WINDOW_TIME + 1)      // max. Samples per Time slice
+#define MAX_SAMPLES_PER_WINDOW  (MAX_SAMP_FREQ * RMS_WINDOW_TIME + 1)             // max. Samples per Time slice
 #define PINK_REF                64.82 //298640883795                              // calibration value
 
 Float_t          linprebuf [MAX_ORDER * 2];
diff --git a/id3tag.c b/id3tag.c
index c32b582..dd31150 100644
--- a/id3tag.c
+++ b/id3tag.c
@@ -89,8 +89,8 @@ struct ID3v2FrameStruct {
 };
 
 struct upgrade_id3v22_struct {
-	char id_v22[3];
-	char id_new[4];
+	char id_v22[4];
+	char id_new[5];
 };
 
 static const struct upgrade_id3v22_struct upgrade_id3v22_table[] = {
@@ -224,8 +224,8 @@ static void id3_release_frames(struct ID3v2FrameStruct *frame)
 	while (frame) {
 		tframe = frame;
 		frame = frame->next;
-		free(tframe->data);
-		free(tframe);
+		delete tframe->data;
+		delete tframe;
 	}
 }
 
@@ -272,13 +272,13 @@ static struct ID3v2FrameStruct * id3_make_frame(const char *frameid, const char
 	}
 	va_end(ap);
 
-	frame = malloc(sizeof(struct ID3v2FrameStruct));
+	frame = new (struct ID3v2FrameStruct);
 	frame->next = NULL;
 	strncpy(frame->frameid, frameid, 4);
 	frame->flags = 0;
 	frame->len = k;
 	frame->hskip = 0;
-	frame->data = malloc(k);
+	frame->data = new unsigned char[k];
 
 	va_start(ap, format);
 	k = 0;
@@ -542,7 +542,7 @@ static int id3_parse_v2_tag(FILE *f, struct ID3v2TagStruct *tag)
 	DBG(("  version=%04x length=%lu flags=%02x\n", tag->version, tag->length, tag->flags));
 
 	/* Read rest of the tag. */
-	tagdata = malloc(dlen);
+	tagdata = new unsigned char[dlen];
 	if (fread(tagdata, 1, dlen, f) != dlen)
 		goto badtag;
 
@@ -677,7 +677,7 @@ static int id3_parse_v2_tag(FILE *f, struct ID3v2TagStruct *tag)
 		}
 
 		/* Allocate frame structure. */
-		frame = malloc(sizeof(struct ID3v2FrameStruct));
+		frame = new (struct ID3v2FrameStruct);
 		frame->next = NULL;
 		memcpy(frame->frameid, frameid, 4);
 		frame->flags = fflags;
@@ -688,13 +688,13 @@ static int id3_parse_v2_tag(FILE *f, struct ID3v2TagStruct *tag)
 		/* Copy frame data. */
 		if ((tag->version >> 8) == 4 && (fflags & FRAMEFL_UNSYNC) != 0) {
 			/* This frame is unsynchronized; decode it now. */
-			frame->data = malloc(flen);
+			frame->data = new unsigned char[flen];
 			k = id3_get_unsync_data(frame->data, tagdata + p, flen);
 			frame->len = k;
 			p += flen;
 		} else if ((tag->version >> 8) == 2 && memcmp(frameid, "APIC", 4) == 0) {
 			/* APIC frame format differs from PIC frame format */
-			frame->data = malloc(flen + 12);
+			frame->data = new unsigned char[flen + 12];
 			frame->data[0] = tagdata[p];
 			k = 1;
 			if (memcmp(tagdata + p + 1, "PNG", 3) == 0) {
@@ -713,7 +713,7 @@ static int id3_parse_v2_tag(FILE *f, struct ID3v2TagStruct *tag)
 			p += flen;
 		} else {
 			/* Normal case, just copy the data. */
-			frame->data = malloc(flen);
+			frame->data = new unsigned char[flen];
 			memcpy(frame->data, tagdata + p, flen);
 			frame->len = flen;
 			p += flen;
@@ -735,11 +735,11 @@ static int id3_parse_v2_tag(FILE *f, struct ID3v2TagStruct *tag)
 	if (p > dlen)
 		goto badtag;
 
-	free(tagdata);
+	delete tagdata;
 	return 1;
 
 badtag:
-	free(tagdata);
+	delete tagdata;
 	id3_release_frames(tag->frames);
 	return M3G_ERR_TAGFORMAT;
 }
@@ -779,7 +779,7 @@ static int id3_write_tag(FILE *f, struct ID3v2TagStruct *tag)
 	DBG(("  length=%lu\n", dlen));
 
 	/* Allocate buffer and fill with zeros. */
-	tagdata = calloc(dlen, sizeof(unsigned char));
+	tagdata = new unsigned char[dlen];
 
 	/* Prepare tag header. */
 	tagdata[0] = 'I';
@@ -806,11 +806,11 @@ static int id3_write_tag(FILE *f, struct ID3v2TagStruct *tag)
 
 	/* Write the whole thing. */
 	if (fwrite(tagdata, 1, dlen, f) != dlen) {
-		free(tagdata);
+		delete tagdata;
 		return M3G_ERR_WRITE;
 	}
 
-	free(tagdata);
+	delete tagdata;
 	return 1;
 }
 
@@ -1024,7 +1024,7 @@ static int id3_copy_data(FILE *inf, FILE *outf, long offset, long count)
 	int ret;
 
 	ret = 1;
-	buf = malloc(bufsize);
+	buf = new char[bufsize];
 
 	if (fseek(inf, offset, SEEK_SET))
 		ret = M3G_ERR_READ;
@@ -1045,7 +1045,7 @@ static int id3_copy_data(FILE *inf, FILE *outf, long offset, long count)
 			count -= k;
 	}
 
-	free(buf);
+	delete buf;
 	return ret;
 }
 
@@ -1152,8 +1152,8 @@ int WriteMP3GainID3Tag(char *filename, struct MP3GainTagInfo *info, int saveTime
 			/* This is a ReplayGain frame; kill it. */
 			need_update = 1;
 			*pframe = frame->next;
-			free(frame->data);
-			free(frame);
+			delete frame->data;
+			delete frame;
 		} else {
 			pframe = &((*pframe)->next);
 		}
@@ -1204,14 +1204,14 @@ int WriteMP3GainID3Tag(char *filename, struct MP3GainTagInfo *info, int saveTime
 	}
 
 	/* Create temporary file. */
-	tmpfilename = malloc(strlen(filename) + 5);
+	tmpfilename = new char[strlen(filename) + 5];
 	strcpy(tmpfilename, filename);
 	strcat(tmpfilename, ".TMP");
 	outf = fopen(tmpfilename, "wb");
 	if (outf == NULL) {
 		passError(MP3GAIN_UNSPECIFED_ERROR, 3, "Can not create temporary file ", tmpfilename, "\n");
 		fclose(f);
-		free(tmpfilename);
+		delete tmpfilename;
 		id3_release_frames(tag.frames);
 		return M3G_ERR_CANT_MAKE_TMP;
 	}
@@ -1249,7 +1249,7 @@ int WriteMP3GainID3Tag(char *filename, struct MP3GainTagInfo *info, int saveTime
 	if (ret < 0) {
 		/* Delete temp file after error. */
 		remove(tmpfilename);
-		free(tmpfilename);
+		delete tmpfilename;
 		return ret;
 	}
 
@@ -1264,7 +1264,7 @@ int WriteMP3GainID3Tag(char *filename, struct MP3GainTagInfo *info, int saveTime
 		   only _temporarily_ failed, and the original file will disappear soon, such as when
 		   all handles on the file are closed. If it does disappear and we also
 		   delete the tmp file, then the file is completely gone... */
-		free(tmpfilename);
+		delete tmpfilename;
 	}
 #endif
 
@@ -1278,7 +1278,7 @@ int WriteMP3GainID3Tag(char *filename, struct MP3GainTagInfo *info, int saveTime
 			fileTime(filename, setStoredTime);
 	}
 
-	free(tmpfilename);
+	delete tmpfilename;
 
 	return ret;
 }
diff --git a/id3tag_foobar.c b/id3tag_foobar.c
new file mode 100644
index 0000000..9e95da2
--- /dev/null
+++ b/id3tag_foobar.c
@@ -0,0 +1,219 @@
+/* 
+ * File:   id3tag_foobar.cpp
+ * Author: max
+ * 
+ * Created on 27 juillet 2009, 07:49
+ */
+
+#include <unistd.h>
+
+#include <taglib/mpegfile.h>
+#include <taglib/id3v2tag.h>
+#include <taglib/id3v2frame.h>
+
+#include <taglib/textidentificationframe.h>
+#include <taglib/generalencapsulatedobjectframe.h>
+
+#include <taglib/tstring.h>
+
+#include <taglib/fileref.h>
+
+#include <taglib/unknownframe.h>
+
+#include <taglib/privateframe.h>
+
+#include "apetag.h"
+#include "id3tag_foobar.h"
+#include "mp3gain.h"
+
+using namespace TagLib::ID3v2;
+using TagLib::String;
+using TagLib::ByteVector;
+
+PrivateFrame* findPrivateFrame(Tag* tag, const String &owner)
+{
+    FrameList l = tag->frameList("PRIV");
+    for (FrameList::Iterator it = l.begin(); it != l.end(); ++it)
+    {
+        PrivateFrame* f = dynamic_cast<PrivateFrame*> (*it);
+        if (f && f->owner() == owner)
+            return f;
+    }
+    return 0;
+}
+
+void traitementTag(Tag* mp3Tag, const char* description, const int test, const char* stringTemplate, double val)
+{
+
+    //   using TagLib::ID3v2::UserTextIdentificationFrame;
+
+    String descriptionS = String(description, String::UTF8);
+    char sbuf[32];
+
+    UserTextIdentificationFrame* userFrame = UserTextIdentificationFrame::find(mp3Tag, descriptionS);
+
+    if (userFrame == NULL && test)
+    {
+        userFrame = new UserTextIdentificationFrame();
+
+        userFrame->setDescription(descriptionS);
+
+        // la memoire sera libéré tt seul !!
+        mp3Tag->addFrame(userFrame);
+    }
+
+    if (test)
+    {
+        sprintf(sbuf, stringTemplate, val);
+        String value = String(sbuf, String::UTF8);
+        userFrame->setText(value);
+
+    } else if (userFrame != NULL)
+    {
+        // suppression automatique de la mem de userFrame avec true
+        mp3Tag->removeFrame(userFrame, true);
+    }
+}
+
+/**
+ * Read gain information from an ID3v2 tag.
+ * return 0 if nothing read
+ * 1 if read OK
+ */
+int ReadMP3GainID3TagFoobar(char *filename, struct MP3GainTagInfo *info)
+{
+    if (access(filename, F_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " doesn't exist.\n");
+        return M3G_ERR_FILEOPEN;
+    } else if (access(filename, R_OK | W_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " can't be read or write.\n");
+        return M3G_ERR_CANT_MODIFY_FILE;
+    }
+
+    TagLib::MPEG::File file(filename);
+
+    Tag* mp3Tag = file.ID3v2Tag(false);
+
+    PrivateFrame* privateMp3GainFrame = findPrivateFrame(mp3Tag, "mp3gain");
+    if (privateMp3GainFrame != 0)
+    {
+        int dirty = info->dirty;
+        int recalc = info->recalc;
+        memcpy((char*) info, privateMp3GainFrame->data().data(), sizeof (MP3GainTagInfo));
+        info->dirty = dirty;
+        info->recalc = recalc;
+    } else
+    {
+        return 0;
+    }
+
+    return 1;
+}
+
+/**
+ * Remove gain information from the ID3v2 tag.
+ * Return 1 on success, 0 if no changes are needed, or a negative error code.
+ */
+int RemoveMP3GainID3TagFoobar(char *filename, int saveTimeStamp)
+{
+    if (access(filename, F_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " doesn't exist.\n");
+        return M3G_ERR_FILEOPEN;
+    } else if (access(filename, R_OK | W_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " can't be read or write.\n");
+        return M3G_ERR_CANT_MODIFY_FILE;
+    }
+
+    if (saveTimeStamp)
+        fileTime(filename, storeTime);
+
+    TagLib::MPEG::File file(filename);
+
+    Tag* mp3Tag = file.ID3v2Tag(false);
+
+    if (mp3Tag == NULL)
+    {
+        return 0;
+    }
+
+    const char* listeDescription[4] = {"replaygain_track_gain", "replaygain_track_peak", "replaygain_album_gain", "replaygain_album_peak"};
+
+    for (int i = 0; i < 4; ++i)
+    {
+        String descriptionS(listeDescription[i]);
+
+        UserTextIdentificationFrame* userFrame = UserTextIdentificationFrame::find(mp3Tag, descriptionS);
+
+        if (userFrame != NULL)
+        {
+            mp3Tag->removeFrame(userFrame, true);
+        }
+    }
+
+    PrivateFrame* privateMp3GainFrame = findPrivateFrame(mp3Tag, "mp3gain");
+    if (privateMp3GainFrame != 0)
+    {
+        mp3Tag->removeFrame(privateMp3GainFrame, true);
+    }
+
+    file.save();
+
+    if (saveTimeStamp)
+        fileTime(filename, setStoredTime);
+
+    return 1;
+}
+
+/**
+ * (Re-)Write gain information to an ID3v2 tag.
+ */
+int WriteMP3GainID3TagFoobar(char *filename, struct MP3GainTagInfo *info, int saveTimeStamp)
+{
+    if (access(filename, F_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " doesn't exist.\n");
+        return M3G_ERR_FILEOPEN;
+    } else if (access(filename, R_OK | W_OK) != 0)
+    {
+        passError(MP3GAIN_UNSPECIFED_ERROR, 3, "File ", filename, " can't be read or write.\n");
+        return M3G_ERR_CANT_MODIFY_FILE;
+    }
+
+    if (saveTimeStamp)
+        fileTime(filename, storeTime);
+
+    TagLib::MPEG::File file(filename);
+
+    Tag* mp3Tag = file.ID3v2Tag(true);
+
+    traitementTag(mp3Tag, "replaygain_track_gain", info->haveTrackGain, "%+.2f dB", info->trackGain);
+    traitementTag(mp3Tag, "replaygain_track_peak", info->haveTrackPeak, "%.6f", info->trackPeak);
+    traitementTag(mp3Tag, "replaygain_album_gain", info->haveAlbumGain, "%+.2f dB", info->albumGain);
+    traitementTag(mp3Tag, "replaygain_album_peak", info->haveAlbumPeak, "%.6f", info->albumPeak);
+
+    PrivateFrame* privateMp3GainFrame = findPrivateFrame(mp3Tag, "mp3gain");
+    if (privateMp3GainFrame == 0)
+    {
+        privateMp3GainFrame = new PrivateFrame();
+        privateMp3GainFrame->setOwner("mp3gain");
+    }
+
+    ByteVector data((const char*) info, sizeof (MP3GainTagInfo));
+
+    privateMp3GainFrame->setData(data);
+
+    mp3Tag->addFrame(privateMp3GainFrame);
+
+    file.save();
+
+    if (saveTimeStamp)
+        fileTime(filename, setStoredTime);
+
+    return 1;
+}
+
+
diff --git a/id3tag_foobar.h b/id3tag_foobar.h
new file mode 100644
index 0000000..dd3202f
--- /dev/null
+++ b/id3tag_foobar.h
@@ -0,0 +1,18 @@
+/* 
+ * File:   id3tag_foobar.h
+ * Author: Maxime de Roucy
+ *
+ * Created on 27 juillet 2009, 07:49
+ */
+
+#ifndef _ID3TAG_FOOBAR_H
+#define	_ID3TAG_FOOBAR_H
+
+int ReadMP3GainID3TagFoobar(char *filename, struct MP3GainTagInfo *info);
+
+int WriteMP3GainID3TagFoobar(char *filename, struct MP3GainTagInfo *info, int saveTimeStamp);
+
+int RemoveMP3GainID3TagFoobar(char *filename, int saveTimeStamp);
+
+#endif	/* _ID3TAG_FOOBAR_H */
+
diff --git a/mp3gain.c b/mp3gain.c
index c575af0..04c657a 100644
--- a/mp3gain.c
+++ b/mp3gain.c
@@ -50,6 +50,7 @@
 #include <math.h>
 #include "apetag.h"
 #include "id3tag.h"
+#include "id3tag_foobar.h"
 #ifdef AACGAIN
 #include "aacgain.h"
 #endif
@@ -145,6 +146,7 @@ int deleteTag = 0;
 int forceRecalculateTag = 0;
 int checkTagOnly = 0;
 static int useId3 = 0;
+static int useId3_foobar = 0;
 
 int gSuccess;
 
@@ -693,7 +695,6 @@ int changeGain(char *filename AACGAIN_ARG(AACGainHandle aacH), int leftgainchang
   int gr;
   unsigned char gain;
   int bitridx;
-  int freqidx;
   long bytesinframe;
   int sideinfo_len;
   int mpegver;
@@ -823,7 +824,6 @@ int changeGain(char *filename AACGAIN_ARG(AACGainHandle aacH), int leftgainchang
 				}
 				else {
 					mpegver = (curframe[1] >> 3) & 0x03;
-					freqidx = (curframe[2] >> 2) & 0x03;
 
 					bytesinframe = arrbytesinframe[bitridx] + ((curframe[2] >> 1) & 0x01);
 
@@ -857,7 +857,6 @@ int changeGain(char *filename AACGAIN_ARG(AACGainHandle aacH), int leftgainchang
 			if (ok) {
 				mpegver = (curframe[1] >> 3) & 0x03;
 				crcflag = curframe[1] & 0x01;
-				freqidx = (curframe[2] >> 2) & 0x03;
 
 				bytesinframe = arrbytesinframe[bitridx] + ((curframe[2] >> 1) & 0x01);
 				mode = (curframe[3] >> 6) & 0x03;
@@ -1118,6 +1117,9 @@ void WriteMP3GainTag(char *filename AACGAIN_ARG(AACGainHandle aacH), struct MP3G
 		/* Write ID3 tag; remove stale APE tag if it exists. */
 		if (WriteMP3GainID3Tag(filename, info, saveTimeStamp) >= 0)
 			RemoveMP3GainAPETag(filename, saveTimeStamp);
+	} else if (useId3_foobar) {
+		if (WriteMP3GainID3TagFoobar(filename, info, saveTimeStamp) >= 0)
+			RemoveMP3GainAPETag(filename, saveTimeStamp);
 	} else {
 		/* Write APE tag */
 		WriteMP3GainAPETag(filename, info, fileTags, saveTimeStamp);
@@ -1346,6 +1348,7 @@ void fullUsage(char *progname) {
 		fprintf(stderr,"\t%cs s - skip (ignore) stored tag info (do not read or write tags)\n",SWITCH_CHAR);
 		fprintf(stderr,"\t%cs r - force re-calculation (do not read tag info)\n",SWITCH_CHAR);
 		fprintf(stderr,"\t%cs i - use ID3v2 tag for MP3 gain info\n",SWITCH_CHAR);
+		fprintf(stderr,"\t%cs f - use ID3v2 tag (like foobar2000 : replaygain_track_*) for MP3 gain info\n",SWITCH_CHAR);
 		fprintf(stderr,"\t%cs a - use APE tag for MP3 gain info (default)\n",SWITCH_CHAR);
 		fprintf(stderr,"\t%cu - undo changes made (based on stored tag info)\n",SWITCH_CHAR);
         fprintf(stderr,"\t%cw - \"wrap\" gain change if gain+change > 255 or gain+change < 0\n",SWITCH_CHAR);
@@ -1413,7 +1416,6 @@ int main(int argc, char **argv) {
 	MPSTR mp;
 	unsigned long ok;
 	int mode;
-	int crcflag;
 	unsigned char *Xingcheck;
 	unsigned long frame;
 	int nchan;
@@ -1664,6 +1666,10 @@ int main(int argc, char **argv) {
 						case 'I':
 							useId3 = 1;
 							break;
+						case 'f':
+						case 'F':
+							useId3_foobar = 1;
+							break;
 						case 'a':
 						case 'A':
 							useId3 = 0;
@@ -1784,6 +1790,14 @@ int main(int argc, char **argv) {
 					tagInfo[mainloop].dirty = 1;
 				}
 				ReadMP3GainID3Tag(curfilename,&(tagInfo[mainloop]));
+			} else if (useId3_foobar) {
+				if (tagInfo[mainloop].haveTrackGain || tagInfo[mainloop].haveAlbumGain ||
+				    tagInfo[mainloop].haveMinMaxGain || tagInfo[mainloop].haveAlbumMinMaxGain ||
+				    tagInfo[mainloop].haveUndo) {
+					/* Mark the file dirty to force upgrade to ID3v2 */
+					tagInfo[mainloop].dirty = 1;
+				}
+				ReadMP3GainID3TagFoobar(curfilename, &(tagInfo[mainloop]));
 			}
 		}
           /*fprintf(stdout,"Read previous tags from %s\n",curfilename);
@@ -2037,7 +2051,9 @@ int main(int argc, char **argv) {
               RemoveMP3GainAPETag(argv[mainloop], saveTime);
               if (useId3) {
                   RemoveMP3GainID3Tag(argv[mainloop], saveTime);
-              }
+              } else if (useId3_foobar) {
+		  RemoveMP3GainID3TagFoobar(argv[mainloop], saveTime);
+	      }
           }
           if ((!QuietMode)&&(!databaseFormat))
               fprintf(stderr,"Deleting tag info of %s...\n", argv[mainloop]);
@@ -2234,7 +2250,6 @@ int main(int argc, char **argv) {
 							}
 							else {
 								mpegver = (curframe[1] >> 3) & 0x03;
-								crcflag = curframe[1] & 0x01;
 								freqidx = (curframe[2] >> 2) & 0x03;
 
 								bytesinframe = arrbytesinframe[bitridx] + ((curframe[2] >> 1) & 0x01);
